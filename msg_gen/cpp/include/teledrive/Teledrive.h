/* Auto-generated by genmsg_cpp for file /home/amsl/AMSL_ros_pkg/teledrive/msg/Teledrive.msg */
#ifndef TELEDRIVE_MESSAGE_TELEDRIVE_H
#define TELEDRIVE_MESSAGE_TELEDRIVE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Twist.h"

namespace teledrive
{
template <class ContainerAllocator>
struct Teledrive_ {
  typedef Teledrive_<ContainerAllocator> Type;

  Teledrive_()
  : header()
  , twist()
  , op_linear(0.0)
  , op_angular(0.0)
  {
  }

  Teledrive_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , twist(_alloc)
  , op_linear(0.0)
  , op_angular(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
   ::geometry_msgs::Twist_<ContainerAllocator>  twist;

  typedef float _op_linear_type;
  float op_linear;

  typedef float _op_angular_type;
  float op_angular;


  typedef boost::shared_ptr< ::teledrive::Teledrive_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teledrive::Teledrive_<ContainerAllocator>  const> ConstPtr;
}; // struct Teledrive
typedef  ::teledrive::Teledrive_<std::allocator<void> > Teledrive;

typedef boost::shared_ptr< ::teledrive::Teledrive> TeledrivePtr;
typedef boost::shared_ptr< ::teledrive::Teledrive const> TeledriveConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::teledrive::Teledrive_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::teledrive::Teledrive_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace teledrive

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::teledrive::Teledrive_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::teledrive::Teledrive_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::teledrive::Teledrive_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b30409c617b49806737c187ab173e37a";
  }

  static const char* value(const  ::teledrive::Teledrive_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb30409c617b49806ULL;
  static const uint64_t static_value2 = 0x737c187ab173e37aULL;
};

template<class ContainerAllocator>
struct DataType< ::teledrive::Teledrive_<ContainerAllocator> > {
  static const char* value() 
  {
    return "teledrive/Teledrive";
  }

  static const char* value(const  ::teledrive::Teledrive_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::teledrive::Teledrive_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
geometry_msgs/Twist twist\n\
float32 op_linear\n\
float32 op_angular\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::teledrive::Teledrive_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::teledrive::Teledrive_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::teledrive::Teledrive_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::teledrive::Teledrive_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.twist);
    stream.next(m.op_linear);
    stream.next(m.op_angular);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Teledrive_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teledrive::Teledrive_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::teledrive::Teledrive_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "twist: ";
s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "op_linear: ";
    Printer<float>::stream(s, indent + "  ", v.op_linear);
    s << indent << "op_angular: ";
    Printer<float>::stream(s, indent + "  ", v.op_angular);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TELEDRIVE_MESSAGE_TELEDRIVE_H

